# Default values for jenkins.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

## Overrides for generated resource names
# See templates/_helpers.tpl
# nameOverride:
# fullnameOverride:
# namespaceOverride:

# For FQDN resolving of the controller service. Change this value to match your existing configuration.
# ref: https://github.com/kubernetes/dns/blob/master/docs/specification.md
clusterZone: "cluster.local"

renderHelmLabels: true

controller:
  # Used for label app.kubernetes.io/component
  componentName: "jenkins-controller"
  image: "wolfman.crabdance.com/jenkins-arm"
  tag: "2.276"
  imagePullPolicy: "Always"
  imagePullSecretName:
  # Optionally configure lifetime for controller-container
  lifecycle:
  #  postStart:
  #    exec:
  #      command:
  #      - "uname"
  #      - "-a"
  disableRememberMe: false
  numExecutors: 0
  # configures the executor mode of the Jenkins node. Possible values are: NORMAL or EXCLUSIVE
  executorMode: "NORMAL"
  # This is ignored if enableRawHtmlMarkupFormatter is true
  markupFormatter: plainText
  customJenkinsLabels: []
  # The default configuration uses this secret to configure an admin user
  # If you don't need that user or use a different security realm then you can disable it
  adminSecret: true

  hostNetworking: false
  # When enabling LDAP or another non-Jenkins identity source, the built-in admin account will no longer exist.
  # If you disable the non-Jenkins identity store and instead use the Jenkins internal one,
  # you should revert controller.adminUser to your preferred admin user:
  adminUser: "admin"
  # adminPassword: <defaults to random>
  admin:
    existingSecret: ""
    userKey: jenkins-admin-user
    passwordKey: jenkins-admin-password
  # This values should not be changed unless you use your custom image of jenkins or any devired from. If you want to use
  # Cloudbees Jenkins Distribution docker, you should set jenkinsHome: "/var/cloudbees-jenkins-distribution"
  jenkinsHome: "/var/jenkins_home"
  # This values should not be changed unless you use your custom image of jenkins or any devired from. If you want to use
  # Cloudbees Jenkins Distribution docker, you should set jenkinsRef: "/usr/share/cloudbees-jenkins-distribution/ref"
  jenkinsRef: "/usr/share/jenkins/ref"
  # Path to the jenkins war file which is used by jenkins-plugin-cli.
  jenkinsWar: "/usr/share/jenkins/jenkins.war"
  resources:
    requests:
      cpu: "50m"
      memory: "256Mi"
    limits:
      cpu: "2000m"
      memory: "4096Mi"
  # Environment variables that get added to the init container (useful for e.g. http_proxy)
  # initContainerEnv:
  #   - name: http_proxy
  #     value: "http://192.168.64.1:3128"
  # containerEnv:
  #   - name: http_proxy
  #     value: "http://192.168.64.1:3128"
  # Set min/max heap here if needed with:
  # javaOpts: "-Xms512m -Xmx512m"
  # jenkinsOpts: ""
  # jenkinsUrl: ""
  # If you set this prefix and use ingress controller then you might want to set the ingress path below
  # jenkinsUriPrefix: "/jenkins"
  # Enable pod security context (must be `true` if podSecurityContextOverride, runAsUser or fsGroup are set)
  usePodSecurityContext: true
  # Note that `runAsUser`, `fsGroup`, and `securityContextCapabilities` are
  # being deprecated and replaced by `podSecurityContextOverride`.
  # Set runAsUser to 1000 to let Jenkins run as non-root user 'jenkins' which exists in 'jenkins/jenkins' docker image.
  # When setting runAsUser to a different value than 0 also set fsGroup to the same value:
  runAsUser: 1000
  fsGroup: 1000
  # If you have PodSecurityPolicies that require dropping of capabilities as suggested by CIS K8s benchmark, put them here
  securityContextCapabilities: {}
  #  drop:
  #    - NET_RAW
  # Completely overwrites the contents of the `securityContext`, ignoring the
  # values provided for the deprecated fields: `runAsUser`, `fsGroup`, and
  # `securityContextCapabilities`.  In the case of mounting an ext4 filesystem,
  # it might be desirable to use `supplementalGroups` instead of `fsGroup` in
  # the `securityContext` block: https://github.com/kubernetes/kubernetes/issues/67014#issuecomment-589915496
  # podSecurityContextOverride:
  #   runAsUser: 1000
  #   runAsNonRoot: true
  #   supplementalGroups: [1000]
  #   # capabilities: {}
  servicePort: 8080
  targetPort: 8080
  # For minikube, set this to NodePort, elsewhere use LoadBalancer
  # Use ClusterIP if your setup includes ingress controller
  serviceType: NodePort
  # Jenkins controller service annotations
  serviceAnnotations: {}
  # Jenkins controller custom labels
  statefulSetLabels: {}
  #   foo: bar
  #   bar: foo
  # Jenkins controller service labels
  serviceLabels: {}
  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
  # Put labels on Jenkins controller pod
  podLabels: {}
  # Used to create Ingress record (should used with ServiceType: ClusterIP)
  # nodePort: <to set explicitly, choose port between 30000-32767
  # Enable Kubernetes Liveness and Readiness Probes
  # if Startup Probe is supported, enable it too
  # ~ 2 minutes to allow Jenkins to restart when upgrading plugins. Set ReadinessTimeout to be shorter than LivenessTimeout.
  healthProbes: true
  probes:
    startupProbe:
      httpGet:
        path: '{{ default "" .Values.controller.jenkinsUriPrefix }}/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 12
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: '{{ default "" .Values.controller.jenkinsUriPrefix }}/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: '{{ default "" .Values.controller.jenkinsUriPrefix }}/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5
  agentListenerPort: 50000
  agentListenerHostPort:
  disabledAgentProtocols:
    - JNLP-connect
    - JNLP2-connect
  csrf:
    defaultCrumbIssuer:
      enabled: true
      proxyCompatability: true
  # Kubernetes service type for the JNLP agent service
  # agentListenerServiceType is the Kubernetes Service type for the JNLP agent service,
  # either 'LoadBalancer', 'NodePort', or 'ClusterIP'
  # Note if you set this to 'LoadBalancer', you *must* define annotations to secure it. By default
  # this will be an external load balancer and allowing inbound 0.0.0.0/0, a HUGE
  # security risk:  https://github.com/kubernetes/charts/issues/1341
  agentListenerServiceType: "ClusterIP"
  # Optionally assign an IP to the LoadBalancer agentListenerService LoadBalancer
  # GKE users: only regional static IPs will work for Service Load balancer.
  agentListenerLoadBalancerIP:
  agentListenerServiceAnnotations: {}

  # Example of 'LoadBalancer' type of agent listener with annotations securing it
  # agentListenerServiceType: LoadBalancer
  # agentListenerServiceAnnotations:
  #   service.beta.kubernetes.io/aws-load-balancer-internal: "True"
  #   service.beta.kubernetes.io/load-balancer-source-ranges: "172.0.0.0/8, 10.0.0.0/8"

  # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
  # set allowed inbound rules on the security group assigned to the controller load balancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  # Optionally assign a known public LB IP
  # loadBalancerIP: 1.2.3.4
  # Optionally configure a JMX port
  # requires additional javaOpts, ie
  # javaOpts: >
  #   -Dcom.sun.management.jmxremote.port=4000
  #   -Dcom.sun.management.jmxremote.authenticate=false
  #   -Dcom.sun.management.jmxremote.ssl=false
  # jmxPort: 4000
  # Optionally configure other ports to expose in the controller container
  extraPorts: []
  # - name: BuildInfoProxy
  #   port: 9000

  # List of plugins to be install during Jenkins controller start
  installPlugins:
    - kubernetes:1.28.6
    - workflow-aggregator:2.6
    - git:4.5.2
    - configuration-as-code:1.46
    - ansible:1.1
    - command-launcher:1.5
    - docker-commons:1.17
    - google-oauth-plugin:1.0.2
    - job-dsl:1.77
    - jdk-tool:1.4
    - pipeline-utility-steps:2.6.1
    - pipeline-github:2.7
    - swarm:3.24
    - terraform:1.0.10

  # List of plugins to install in addition to those listed in controller.installPlugins
  additionalPlugins: []

  # Enable to initialize the Jenkins controller only once on initial installation.
  # Without this, whenever the controller gets restarted (Evicted, etc.) it will fetch plugin updates which has the potential to cause breakage.
  # Note that for this to work, `persistence.enabled` needs to be set to `true`
  initializeOnce: false

  # Enable to always override the installed plugins with the values of 'controller.installPlugins' on upgrade or redeployment.
  # overwritePlugins: true

  # Configures if plugins bundled with `controller.image` should be overwritten with the values of 'controller.installPlugins' on upgrade or redeployment.
  overwritePluginsFromImage: true

  # Enable HTML parsing using OWASP Markup Formatter Plugin (antisamy-markup-formatter), useful with ghprb plugin.
  # The plugin is not installed by default, please update controller.installPlugins.
  enableRawHtmlMarkupFormatter: false
  # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
  scriptApproval: []
  #  - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
  #  - "new groovy.json.JsonSlurperClassic"
  # List of groovy init scripts to be executed during Jenkins controller start
  initScripts: []
  #  - |
  #    print 'adding global pipeline libraries, register properties, bootstrap jobs...'

  # Below is the implementation of Jenkins Configuration as Code.  Add a key under configScripts for each configuration area,
  # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
  # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
  # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration yaml file on the controller in
  # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code Plugin.  The lines after each |
  # become the content of the configuration yaml file.  The first line after this is a JCasC root element, eg jenkins, credentials,
  # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.  The example below creates a welcome message:
  JCasC:
    enabled: true
    defaultConfig: true
    configScripts: {}
    #  welcome-message: |
    #    jenkins:
    #      systemMessage: Welcome to our CI\CD server.  This Jenkins is configured and managed 'as code'.
    # Ignored if securityRealm is defined in controller.JCasC.configScripts and
    # ignored if controller.enableXmlConfig=true as controller.securityRealm takes precedence

    credentials: |-
     system:
     domainCredentials:
      - credentials:
      - file:
          fileName: "kubeconfig"
          id: "kubeconfig"
          scope: GLOBAL
          secretBytes: "{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}"
      - basicSSHUserPrivateKey:
          id: "github"
          privateKeySource:
            directEntry:
              privateKey: "{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}"
          scope: GLOBAL
          username: "andycockers"
      - file:
          fileName: "jenkins-test-project-284609-ee44668f6997.json"
          id: "jenkins-test-project"
          scope: GLOBAL
          secretBytes: "{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}"
      - string:
          id: "hetzner"
          scope: GLOBAL
          secret: "{AQAAABAAAABQcbC0+mdmONR9XmShKs9449ugcmqZDz5IPy4mVLyc7eWCMMworsx0HPkvP/K3nC5Qu4TdwLa8oH32Dwd9wtoqluEqbjdNJVh9FiF81+gkXxrKhUrIjH/kGSvvUxKdKdn6}"
      - file:
          fileName: "hetzner"
          id: "hetzner-ssh"
          scope: GLOBAL
          secretBytes: "{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}"
      - string:
          id: "ansible-vault"
          scope: GLOBAL
          secret: "{AQAAABAAAAAQTzHSck/+/63l4z9wNWXyVXJHwPtP7RowYo5CyqW1J+4=}"

    securityRealm: |-
      local:
        allowsSignup: false
        enableCaptcha: false
        users:
        - id: "${chart-admin-username}"
          name: "Jenkins Admin"
          password: "${chart-admin-password}"
    # Ignored if authorizationStrategy is defined in controller.JCasC.configScripts
    authorizationStrategy: |-
      loggedInUsersCanDoAnything:
        allowAnonymousRead: false
  # Optionally specify additional init-containers
  customInitContainers: []
  # - name: custom-init
  #   image: "alpine:3.7"
  #   imagePullPolicy: Always
  #   command: [ "uname", "-a" ]

  clouds: |-
   - kubernetes:
      containerCap: 10
      containerCapStr: "10"
      defaultsProviderTemplate: "inbound-agent-arm7"
      jenkinsTunnel: "helm-jenkins-agent:50000"
      jenkinsUrl: "http://helm-jenkins:8080"
      name: "kubernetes"
      namespace: "jenkins-helm"
      podLabels:
      - key: "jenkins/helm-jenkins-jenkins-agent"
        value: "true"
      serverUrl: "https://kubernetes.default"
      templates:
      - containers:
        - args: "^${computer.jnlpmac} ^${computer.name}"
          envVars:
          - envVar:
              key: "JENKINS_URL"
              value: "http://helm-jenkins.jenkins-helm.svc.cluster.local:8080/"
          image: "wolfman.crabdance.com/jenkins-inbound-agent-arm7"
          livenessProbe:
            failureThreshold: 0
            initialDelaySeconds: 0
            periodSeconds: 0
            successThreshold: 0
            timeoutSeconds: 0
          name: "jnlp"
          resourceLimitCpu: "512m"
          resourceLimitMemory: "512Mi"
          resourceRequestCpu: "512m"
          resourceRequestMemory: "512Mi"
          ttyEnabled: true
          workingDir: "/home/jenkins/agent"
        id: "849e6dc2-2f8f-46af-bab5-a6f5ab7ba3fb"
        label: "default-java"
        name: "inbound-agent-arm7"
        nodeUsageMode: NORMAL
        podRetention: "never"
        serviceAccount: "default"
        yamlMergeStrategy: "override"

  sidecars:
    configAutoReload:
      # If enabled: true, Jenkins Configuration as Code will be reloaded on-the-fly without a reboot.  If false or not-specified,
      # jcasc changes will cause a reboot and will only be applied at the subsequent start-up.  Auto-reload uses the
      # http://<jenkins_url>/reload-configuration-as-code endpoint to reapply config when changes to the configScripts are detected.
      enabled: true
      image: wolfman.crabdance.com/k8s-sidecar
      imagePullPolicy: IfNotPresent
      resources: {}
        #   limits:
        #     cpu: 100m
        #     memory: 100Mi
        #   requests:
        #     cpu: 50m
        #     memory: 50Mi
      # How many connection-related errors to retry on
      reqRetryConnect: 10
      # env:
      #   - name: REQ_TIMEOUT
      #     value: "30"
      # SSH port value can be set to any unused TCP port.  The default, 1044, is a non-standard SSH port that has been chosen at random.
      # Is only used to reload jcasc config from the sidecar container running in the Jenkins controller pod.
      # This TCP port will not be open in the pod (unless you specifically configure this), so Jenkins will not be
      # accessible via SSH from outside of the pod.  Note if you use non-root pod privileges (runAsUser & fsGroup),
      # this must be > 1024:
      sshTcpPort: 1044
      # folder in the pod that should hold the collected dashboards:
      folder: "/var/jenkins_home/casc_configs"
      # If specified, the sidecar will search for JCasC config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces:
      # searchNamespace:

    # Allows you to inject additional/other sidecars
    other: []
    ## The example below runs the client for https://smee.io as sidecar container next to Jenkins,
    ## that allows to trigger build behind a secure firewall.
    ## https://jenkins.io/blog/2019/01/07/webhook-firewalls/#triggering-builds-with-webhooks-behind-a-secure-firewall
    ##
    ## Note: To use it you should go to https://smee.io/new and update the url to the generete one.
    # - name: smee
    #   image: docker.io/twalter/smee-client:1.0.2
    #   args: ["--port", "{{ .Values.controller.servicePort }}", "--path", "/github-webhook/", "--url", "https://smee.io/new"]
    #   resources:
    #     limits:
    #       cpu: 50m
    #       memory: 128Mi
    #     requests:
    #       cpu: 10m
    #       memory: 32Mi
  # Name of the Kubernetes scheduler to use
  schedulerName: ""
  # Node labels and tolerations for pod assignment
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  nodeSelector: {}

  terminationGracePeriodSeconds:

  tolerations: []

  affinity: {}
  # Leverage a priorityClass to ensure your pods survive resource shortages
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  priorityClassName:

  podAnnotations: {}
  # Add StatefulSet annotations
  statefulSetAnnotations: {}

  ingress:
    enabled: false
    # Override for the default paths that map requests to the backend
    paths: []
    # - backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
    # - backend:
    #     serviceName: >-
    #       {{ template "jenkins.fullname" . }}
    #     # Don't use string here, use only integer value!
    #     servicePort: 8080
    # For Kubernetes v1.14+, use 'networking.k8s.io/v1beta1'
    # For Kubernetes v1.19+, use 'networking.k8s.io/v1'
    apiVersion: "extensions/v1beta1"
    labels: {}
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # Set this path to jenkinsUriPrefix above or use annotations to rewrite path
    # path: "/jenkins"
    # configures the hostname e.g. jenkins.example.com
    hostName:
    tls:
    # - secretName: jenkins.cluster.local
    #   hosts:
    #     - jenkins.cluster.local

  # often you want to have your controller all locked down and private
  # but you still want to get webhooks from your SCM
  # A secondary ingress will let you expose different urls
  # with a differnt configuration
  secondaryingress:
    enabled: false
    # paths you want forwarded to the backend
    # ex /github-webhook
    paths: []
    # For Kubernetes v1.14+, use 'networking.k8s.io/v1beta1'
    # For Kubernetes v1.19+, use 'networking.k8s.io/v1'
    apiVersion: "extensions/v1beta1"
    labels: {}
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # configures the hostname e.g. jenkins-external.example.com
    hostName:
    tls:
    # - secretName: jenkins-external.example.com
    #   hosts:
    #     - jenkins-external.example.com

  # If you're running on GKE and need to configure a backendconfig
  # to finish ingress setup, use the following values.
  # Docs: https://cloud.google.com/kubernetes-engine/docs/concepts/backendconfig
  backendconfig:
    enabled: false
    apiVersion: "extensions/v1beta1"
    name:
    labels: {}
    annotations: {}
    spec: {}

  # Openshift route
  route:
    enabled: false
    labels: {}
    annotations: {}
    # path: "/jenkins"

  # controller.hostAliases allows for adding entries to Pod /etc/hosts:
  # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  hostAliases: []
  # - ip: 192.168.50.50
  #   hostnames:
  #     - something.local
  # - ip: 10.0.50.50
  #   hostnames:
  #     - other.local

  # Expose Prometheus metrics
  prometheus:
    # If enabled, add the prometheus plugin to the list of plugins to install
    # https://plugins.jenkins.io/prometheus
    enabled: false
    # Additional labels to add to the ServiceMonitor object
    serviceMonitorAdditionalLabels: {}
    # Set a custom namespace where to deploy ServiceMonitor resource
    # serviceMonitorNamespace: monitoring
    scrapeInterval: 60s
    # This is the default endpoint used by the prometheus plugin
    scrapeEndpoint: /prometheus
    # Additional labels to add to the PrometheusRule object
    alertingRulesAdditionalLabels: {}
    # An array of prometheus alerting rules
    # See here: https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/
    # The `groups` root object is added by default, simply add the rule entries
    alertingrules: []
    # Set a custom namespace where to deploy PrometheusRule resource
    prometheusRuleNamespace: ""

  # Can be used to disable rendering controller test resources when using helm template
  testEnabled: true

  httpsKeyStore:
    jenkinsHttpsJksSecretName: ''
    enable: false
    httpPort: 8081
    path: "/var/jenkins_keystore"
    fileName: "keystore.jks"
    password: "password"
    # Convert keystore.jks files content to base64 ( cat keystore.jks | base64 ) and put the output here
    jenkinsKeyStoreBase64Encoded: |
        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

agent:
  enabled: true
  defaultsProviderTemplate: ""
  # URL for connecting to the Jenkins contoller
  jenkinsUrl:
  # connect to the specified host and port, instead of connecting directly to the Jenkins controller
  jenkinsTunnel:
  kubernetesConnectTimeout: 5
  kubernetesReadTimeout: 15
  maxRequestsPerHostStr: "32"
  namespace:
  image: "jenkins/inbound-agent"
  tag: "4.6-1"
  workingDir: "/home/jenkins"
  customJenkinsLabels: []
  # name of the secret to be used for image pulling
  imagePullSecretName:
  componentName: "jenkins-agent"
  websocket: false
  privileged: false
  runAsUser:
  runAsGroup:
  resources:
    requests:
      cpu: "512m"
      memory: "512Mi"
    limits:
      cpu: "512m"
      memory: "512Mi"
  # You may want to change this to true while testing a new image
  alwaysPullImage: false
  # Controls how agent pods are retained after the Jenkins build completes
  # Possible values: Always, Never, OnFailure
  podRetention: "Never"
  # You can define the volumes that you want to mount for this container
  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, PVC, Secret
  # Configure the attributes as they appear in the corresponding Java class for that type
  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes
  volumes: []
  # - type: ConfigMap
  #   configMapName: myconfigmap
  #   mountPath: /var/myapp/myconfigmap
  # - type: EmptyDir
  #   mountPath: /var/myapp/myemptydir
  #   memory: false
  # - type: HostPath
  #   hostPath: /var/lib/containers
  #   mountPath: /var/myapp/myhostpath
  # - type: Nfs
  #   mountPath: /var/myapp/mynfs
  #   readOnly: false
  #   serverAddress: "192.0.2.0"
  #   serverPath: /var/lib/containers
  # - type: PVC
  #   claimName: mypvc
  #   mountPath: /var/myapp/mypvc
  #   readOnly: false
  # - type: Secret
  #   defaultMode: "600"
  #   mountPath: /var/myapp/mysecret
  #   secretName: mysecret
  # Pod-wide environment, these vars are visible to any container in the agent pod

  # You can define the workspaceVolume that you want to mount for this container
  # Allowed types are: DynamicPVC, EmptyDir, HostPath, Nfs, PVC
  # Configure the attributes as they appear in the corresponding Java class for that type
  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes/workspace
  workspaceVolume: {}
  # - type: DynamicPVC
  #   configMapName: myconfigmap
  # - type: EmptyDir
  #   memory: false
  # - type: HostPath
  #   hostPath: /var/lib/containers
  # - type: Nfs
  #   readOnly: false
  #   serverAddress: "192.0.2.0"
  #   serverPath: /var/lib/containers
  # - type: PVC
  #   claimName: mypvc
  #   readOnly: false
  # Pod-wide environment, these vars are visible to any container in the agent pod
  envVars: []
  # - name: PATH
  #   value: /usr/local/bin
  nodeSelector: {}
  # Key Value selectors. Ex:
  # jenkins-agent: v1

  # Executed command when side container gets started
  command:
  args: "${computer.jnlpmac} ${computer.name}"
  # Side container name
  sideContainerName: "jnlp"
  # Doesn't allocate pseudo TTY by default
  TTYEnabled: false
  # Max number of spawned agent
  containerCap: 10
  # Pod name
  podName: "default"
  # Allows the Pod to remain active for reuse until the configured number of
  # minutes has passed since the last step was executed on it.
  idleMinutes: 0
  # Raw yaml template for the Pod. For example this allows usage of toleration for agent pods.
  # https://github.com/jenkinsci/kubernetes-plugin#using-yaml-to-define-pod-templates
  # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  yamlTemplate: ""
  # yamlTemplate: |-
  #   apiVersion: v1
  #   kind: Pod
  #   spec:
  #     tolerations:
  #     - key: "key"
  #       operator: "Equal"
  #       value: "value"
  # Defines how the raw yaml field gets merged with yaml definitions from inherited pod templates: merge or override
  yamlMergeStrategy: "override"
  # Timeout in seconds for an agent to be online
  connectTimeout: 100
  # Annotations to apply to the pod.
  annotations: {}

  # Below is the implementation of custom pod templates for the default configured kubernetes cloud.
  # Add a key under podTemplates for each pod template. Each key (prior to | character) is just a label, and can be any value.
  # Keys are only used to give the pod template a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
  # characters: lowercase letters, numbers, and hyphens. Each pod template can contain multiple containers.
  # For this pod templates configuration to be loaded the following values must be set:
  # controller.JCasC.defaultConfig: true
  # Best reference is https://<jenkins_url>/configuration-as-code/reference#Cloud-kubernetes. The example below creates a python pod template.
  podTemplates: {}
  #  python: |
  #    - name: python
  #      label: jenkins-python
  #      serviceAccount: jenkins
  #      containers:
  #        - name: python
  #          image: python:3
  #          command: "/bin/sh -c"
  #          args: "cat"
  #          ttyEnabled: true
  #          privileged: true
  #          resourceRequestCpu: "400m"
  #          resourceRequestMemory: "512Mi"
  #          resourceLimitCpu: "1"
  #          resourceLimitMemory: "1024Mi"

# Here you can add additional agents
# They inherit all values from `agent` so you only need to specify values which differ
additionalAgents: {}
#  maven:
#    podName: maven
#    customJenkinsLabels: maven
#    # An example of overriding the jnlp container
#    # sideContainerName: jnlp
#    image: jenkins/jnlp-agent-maven
#    tag: latest
#  python:
#    podName: python
#    customJenkinsLabels: python
#    sideContainerName: python
#    image: python
#    tag: "3"
#    command: "/bin/sh -c"
#    args: "cat"
#    TTYEnabled: true

persistence:
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim:
  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass:
  annotations: {}
  accessMode: "ReadWriteOnce"
  size: "8Gi"
  volumes:
  #  - name: nothing
  #    emptyDir: {}
  mounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true

networkPolicy:
  # Enable creation of NetworkPolicy resources.
  enabled: false
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  apiVersion: networking.k8s.io/v1
  # You can allow agents to connect from both within the cluster (from within specific/all namespaces) AND/OR from a given external IP range
  internalAgents:
    allowed: true
    podLabels: {}
    namespaceLabels: {}
      # project: myproject
  externalAgents: {}
  #   ipCIDR: 172.17.0.0/16
  #   except:
  #     - 172.17.1.0/24

## Install Default RBAC roles and bindings
rbac:
  create: true
  readSecrets: false

serviceAccount:
  create: true
  # The name of the service account is autogenerated by default
  name:
  annotations: {}

serviceAccountAgent:
  # Specifies whether a ServiceAccount should be created
  create: false
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  annotations: {}

## Backup cronjob configuration
## Ref: https://github.com/maorfr/kube-tasks
backup:
  # Backup must use RBAC
  # So by enabling backup you are enabling RBAC specific for backup
  enabled: false
  # Used for label app.kubernetes.io/component
  componentName: "backup"
  # Schedule to run jobs. Must be in cron time format
  # Ref: https://crontab.guru/
  schedule: "0 2 * * *"
  labels: {}
  annotations: {}
    # Example for authorization to AWS S3 using kube2iam or IRSA
    # Can also be done using environment variables
    # iam.amazonaws.com/role: "jenkins"
    # "eks.amazonaws.com/role-arn": "arn:aws:iam::123456789012:role/jenkins-backup"
  # Set this to terminate the job that is running/failing continously and set the job status to "Failed"
  activeDeadlineSeconds: ""
  image:
    repository: "maorfr/kube-tasks"
    tag: "0.2.0"
  # Additional arguments for kube-tasks
  # Ref: https://github.com/maorfr/kube-tasks#simple-backup
  extraArgs: []
  # Add existingSecret for AWS credentials
  existingSecret: {}
  ## Example for using an existing secret
   # jenkinsaws:
  ## Use this key for AWS access key ID
     # awsaccesskey: jenkins_aws_access_key
  ## Use this key for AWS secret access key
     # awssecretkey: jenkins_aws_secret_key
  # Add additional environment variables
   # jenkinsgcp:
  ## Use this key for GCP credentials
     # gcpcredentials: credentials.json
  env: []
  # Example environment variable required for AWS credentials chain
  # - name: "AWS_REGION"
  #   value: "us-east-1"
  resources:
    requests:
      memory: 1Gi
      cpu: 1
    limits:
      memory: 1Gi
      cpu: 1
  # Destination to store the backup artifacts
  # Supported cloud storage services: AWS S3, Minio S3, Azure Blob Storage, Google Cloud Storage
  # Additional support can added. Visit this repository for details
  # Ref: https://github.com/maorfr/skbn
  destination: "s3://jenkins-data/backup"
  # By enabling only the jenkins_home/jobs folder gets backed up, not the whole jenkins instance
  onlyJobs: false
  # Enable backup pod security context (must be `true` if runAsUser or fsGroup are set)
  usePodSecurityContext: true
  # When setting runAsUser to a different value than 0 also set fsGroup to the same value:
  runAsUser: 1000
  fsGroup: 1000
  securityContextCapabilities: {}
  #  drop:
  #    - NET_RAW
checkDeprecation: true